{
  "appDescription": "Data Service",
  "categories": [
    {
      "categoryName": "DataService Engine Configuration",
      "properties": [
        {
          "propName": "spring.jackson.default-property-inclusion",
          "propDescription": "Inclusion of Properties During Serialization",
          "propValue": "NON_EMPTY",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "enableUniqueUDFNames",
          "propDescription": "Enable Unique UDF Name Validation",
          "propValue": "false",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "logging.config",
          "propDescription": "Logging Configuration File Path",
          "propValue": "config/logback_dataservice.xml",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "info.app.name",
          "propDescription": "Application name to show on actuator info endpoint",
          "propValue": "Data Service",
          "valueType": "string",
          "isTenantProperty": "false"
        }
      ]
    },
    {
      "categoryName": "Application Security Configurations",
      "properties": [
        {
          "propName": "operation.roles.submitPlanUDFChange",
          "propDescription": "User Role for submitPlanUDFChange API",
          "propValue": "AZ_TIBCO_OM_NONPROD_ADMIN",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "operation.roles.submitPlanItemUDFChange",
          "propDescription": "User Role for submitPlanItemUDFChange API",
          "propValue": "AZ_TIBCO_OM_NONPROD_ADMIN",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "operation.roles.getPlanItemsDetail",
          "propDescription": "User Role for getPlanItemsDetail API",
          "propValue": "AZ_TIBCO_OM_NONPROD_ADMIN,AZ_TIBCO_OM_NONPROD_USER",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "operation.roles.getPlanDetail",
          "propDescription": "User Role for getPlanDetail API",
          "propValue": "AZ_TIBCO_OM_NONPROD_ADMIN,AZ_TIBCO_OM_NONPROD_USER",
          "valueType": "string",
          "isTenantProperty": "false"
        }
      ]
    },
    {
      "categoryName": "EMS Configuration",
      "properties": [
        {
          "propName": "emsServerURL",
          "propDescription": "EMS Server URL",
          "propValue": "tcp://localhost:7222",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "emsServerUsername",
          "propDescription": "EMS Server User Name",
          "propValue": "admin",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "emsServerPassword",
          "propDescription": "EMS Server Password",
          "propValue": "admin",
          "valueType": "password",
          "isTenantProperty": "false"
        },
        {
          "propName": "jndiConnectionFactory",
          "propDescription": "JNDI Connection Factory Name",
          "propValue": "GenericConnectionFactory",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "tibjmsNamingSecurityProtocol",
          "propDescription": "Security protocol to use in Tibjms JNDI lookups.",
          "propValue": "",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "tibjmsNamingSslEnableVerifyHost",
          "propDescription": "Enable TrustStore verification using SSL.",
          "propValue": "",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "initialContextFactory",
          "propDescription": "Initializing Context Factory Name",
          "propValue": "com.tibco.tibjms.naming.TibjmsInitialContextFactory",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "jmsSessionTransacted",
          "propDescription": "Keep EMS Session Transacted",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "timeoutReceiveCalls",
          "propDescription": "EMS message acknowledge timeout in milliseconds",
          "propValue": "10000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "concurrentEmsConsumers",
          "propDescription": "EMS Concurrent Consumers",
          "propValue": "5",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "plan.request.loading.queue",
          "propDescription": "Plan Request Loading Queue",
          "propValue": "tibco.aff.tds.plan.request",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.fom.oms.tds.setplanresponse.sender.queue",
          "propDescription": "SetPlan/SetPlanItem Response queue",
          "propValue": "tibco.aff.tds.plan.reply",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.fom.oms.tds.setplanrequest.receiver.deadqueue",
          "propDescription": "SetPlan/SetPlanItem Request dead queue",
          "propValue": "tibco.aff.oms.tds.plan.request.dead",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.fom.oms.tds.setplanrequest.receiver.count",
          "propDescription": "SetPlan/SetPlanItem Receiver count",
          "propValue": "3",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.fom.oms.tds.set.jms.deliveryPersistent",
          "propDescription": "deliveryPersistent flag for NON-RPC set operations",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.fom.oms.tds.get.jms.deliveryPersistent",
          "propDescription": "deliveryPersistent flag for NON-RPC get operations",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.fom.oms.tds.getplanrequest.receiver.queue",
          "propDescription": "GetPlan/GetPlanItem Request receiver queue",
          "propValue": "tibco.aff.tds.plan.read.request",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.fom.oms.tds.getplanrequest.receiver.count",
          "propDescription": "GetPlan/GetPlanItem Receiver count",
          "propValue": "3",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.fom.oms.tds.getplanrequest.receiver.deadqueue",
          "propDescription": "GetPlan/GetPlanItem Request dead queue",
          "propValue": "tibco.aff.oms.tds.plan.read.request.dead",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.fom.oms.tds.getplanresponse.sender.queue",
          "propDescription": "GetPlan/GetPlanItem Response queue",
          "propValue": "tibco.aff.tds.plan.reply",
          "valueType": "string",
          "isTenantProperty": "false"
        }
      ]
    },
    {
      "categoryName": "Status Messages Redelivery Policy",
      "properties": [
        {
          "propName": "com.tibco.af.oms.statusmessage.max.redeliveries",
          "propDescription": "Number of retries for Status Message",
          "propValue": "3",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.af.oms.statusmessage.redelivery.delay",
          "propDescription": "Interval delay in milliseconds between Status Message retries",
          "propValue": "3000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.af.oms.statusmessage.max.redelivery.delay",
          "propDescription": "Interval delay in milliseconds between Status Message retries",
          "propValue": "30000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.af.oms.statusmessage.useExponentialBackOff",
          "propDescription": "Use Exponential backoff For Status Message retries",
          "propValue": "false",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.af.oms.statusmessage.exponentialBackOffMultiplier",
          "propDescription": "Exponential backoff Multiplier For Status Message retries",
          "propValue": "2",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.af.oms.statusmessage.logRetryAttempted",
          "propDescription": "Log retry attempt For Status Message retries",
          "propValue": "false",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "com.tibco.af.oms.statusmessage.logStackTrace",
          "propDescription": "Log retry failed stacktrace For Status Message retries",
          "propValue": "false",
          "valueType": "boolean",
          "isTenantProperty": "false"
        }
      ]
    },
    {
      "categoryName": "Order Data Source Configuration",
      "properties": [
        {
          "propName": "datasourceDriverClassName",
          "propDescription": "Data Source Driver Class Name",
          "allowedValues": [
            "org.postgresql.Driver",
            "oracle.jdbc.driver.OracleDriver"
          ],
          "propValue": "org.postgresql.Driver",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsUsername",
          "propDescription": "Data Source Username",
          "propValue": "orderdsuserll",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsPassword",
          "propDescription": "Data Source Password",
          "propValue": "orderdsuserll",
          "valueType": "password",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsUrl",
          "propDescription": "Data Source URL",
          "allowedValues": [
            "jdbc:postgresql://localhost:5432/orderdsdbll?currentSchema=orderdsschemall",
            "jdbc:oracle:thin:@//localhost:1521/orcl.apac.tibco.com"
          ],
          "propValue": "jdbc:postgresql://localhost:5432/orderdsdbll?currentSchema=orderdsschemall",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsInitializeSize",
          "propDescription": "Number of connections that will be established when the connection pool is started",
          "propValue": "2",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsMaxIdle",
          "propDescription": "Maximum number of connections that should be kept in the idle pool",
          "propValue": "11",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsMaxActive",
          "propDescription": "Maximum number of active connections that can be allocated from this pool at the same time",
          "propValue": "12",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsMaxWait",
          "propDescription": "Maximum number of milliseconds that the pool will wait when there are no available connections",
          "propValue": "10000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "datasourceValidationQuery",
          "propDescription": "SQL query that will be used to validate connections",
          "allowedValues": [
            "select 1 from dual",
            "SELECT 1"
          ],
          "propValue": "SELECT 1",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsTestOnBorrow",
          "propDescription": "Enable connection validation before being borrowed from the pool",
          "propValue": "false",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsValidationInterval",
          "propDescription": "Data source validation interval in milliseconds",
          "propValue": "5000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsTestWhileIdle",
          "propDescription": "Enable connection validation while idle in connection pool",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsTimeBetweenEvictionRunsMillis",
          "propDescription": "Data Source Eviction Interval in milliseconds",
          "propValue": "5000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsMinEvictableIdleTimeMillis",
          "propDescription": "The minimum amount of time in milliseconds an object must sit idle in the pool before it is eligible for eviction",
          "propValue": "5000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsNumTestsPerEvictionRun",
          "propDescription": "Pooled Data Source Tests Per Eviction Run",
          "propValue": "5",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsDefaultAutoCommit",
          "propDescription": "The default auto-commit state of connections created by this pool",
          "propValue": "false",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsRollbackOnReturn",
          "propDescription": "Enable rollback any pending transaction when a connection is returned to pool",
          "propValue": "false",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsCommitOnReturn",
          "propDescription": "Enable commit any pending transaction when a connection is returned to pool",
          "propValue": "false",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderDsCustomProperty",
          "propDescription": "Pooled Database Custom Property",
          "propValue": "",
          "valueType": "string",
          "isTenantProperty": "false"
        }
      ]
    },
    {
      "categoryName": "Redis Data Source Configuration",
      "properties": [
        {
          "propName": "orderRedisHost",
          "propDescription": "Redis Server Host for Storing Order Related Information",
          "propValue": "localhost",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderRedisClusterEnabled",
          "propDescription": "Whether redis is running in Cluster Mode",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderRedisPort",
          "propDescription": "Redis Server Port for Storing Order Related Information",
          "propValue": "6379",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderRedisUsername",
          "propDescription": " Username to connect to Redis Cluster/Node",
          "propValue": "",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderRedisPassword",
          "propDescription": "Password to connect to Redis Cluster/Node",
          "propValue": "password",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderRedisDatabase",
          "propDescription": "Redis server Database name for storing Order Related Information",
          "propValue": "",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderRedisClientName",
          "propDescription": "Redis server ClientName for storing Order Related Information",
          "propValue": "",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisTestOnBorrow",
          "propDescription": "Enable connection validation before being borrowed from the pool",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisTestOnReturn",
          "propDescription": "Enable connection validation before being returned to the pool",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisTestWhileIdle",
          "propDescription": "Enable connection validation while idle in connection pool",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisBlockedWhenExhausted",
          "propDescription": "Enable connection blocking on borrow when connection pool is exhausted",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisJmxEnabled",
          "propDescription": "Enabled JMX for connections.",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisLifo",
          "propDescription": "Enable LIFO behaviour for idle objects. Always returning the most recently used object from the pool",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisMaxIdle",
          "propDescription": "Maximum number of idle connections in the pool",
          "propValue": "64",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisMinIdle",
          "propDescription": "Minimum number of idle connections to maintain the pool",
          "propValue": "16",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisMaxTotal",
          "propDescription": "Maximum number of connections that can be allocated by the pool at a given time",
          "propValue": "64",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisNumTestsPerEvictionRun",
          "propDescription": "Maximum number of connections to examine during each evictor run",
          "propValue": "5",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisSoftMinEvictableIdleTimeMillis",
          "propDescription": "Minimum amount of time in milliseconds an object may sit idle in the pool if minIdle instances are available",
          "propValue": "3000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisMinEvictableIdleTimeMillis",
          "propDescription": "Min Evictable Idle Time Millis",
          "propValue": "6000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisTimeBetweenEvictionRunsMillis",
          "propDescription": "Minimum amount of time in milliseconds an object may sit idle in the pool",
          "propValue": "3000",
          "valueType": "number",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderRedisSslEnabled",
          "propDescription": "Connect to Redis Cluster/Node via SSL",
          "propValue": "true",
          "valueType": "boolean",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisKeyStoreType",
          "propDescription": "Redis SSL KeyStore Type",
          "propValue": "pkcs12",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisKeyStorePassword",
          "propDescription": "Redis SSL KeyStore Password",
          "propValue": "tibco123",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisTrustStoreType",
          "propDescription": "Redis SSL TrustStore Type",
          "propValue": "jks",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisTrustStorePassword",
          "propDescription": "Redis SSL TrustStore Password",
          "propValue": "tibco123",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisKeyStoreAbsoluteFilePath",
          "propDescription": "Redis SSL KeyStore Absolute File Path",
          "propValue": "D:/certificate/myhost.p12",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "redisTrustStoreAbsoluteFilePath",
          "propDescription": "Redis SSL TrustStore Absolute File Path",
          "propValue": "D:/certificate/cacert",
          "valueType": "string",
          "isTenantProperty": "false"
        }
      ]
    },
    {
      "categoryName": "Generic Relational Data Source Configuration",
      "properties": [
        {
          "propName": "databaseType",
          "propDescription": "Database Type. Allowed values are oracle or postgres",
          "allowedValues": [
            "postgres",
            "oracle"
          ],
          "propValue": "postgres",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "hibernateDialect",
          "propDescription": "Hibernate Dialect",
          "allowedValues": [
            "org.hibernate.dialect.PostgreSQLDialect",
            "org.hibernate.dialect.Oracle10gDialect"
          ],
          "propValue": "org.hibernate.dialect.PostgreSQLDialect",
          "valueType": "string",
          "isTenantProperty": "false"
        },
        {
          "propName": "orderHibernateShowSql",
          "propDescription": "Hibernate Show SQL",
          "propValue": "false",
          "valueType": "boolean",
          "isTenantProperty": "false"
        }
      ]
    }
  ]
}